<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd  http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<context:property-placeholder />
	<context:annotation-config />
	<bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer" />
	<bean
		class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer" />
	
	<bean id="repositoryBean" class="healthcheck.api.HCRepository">
	</bean>

	<!-- CXF Swagger2Feature -->
	<bean id="swagger2Feature" class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
		<!-- customize some of the properties -->
		<property name="basePath" value="/api/swaggerSpec" />
		<property name="contact" value="tranoris@ece.upatras.gr" />
		<property name="scanAllResources" value="true" />		
	</bean>

	<jaxrs:server id="services" address="/api/">
		<jaxrs:serviceBeans>

			<bean class="healthcheck.api.HealthcheckAPI">
				<property name="hcRepository" ref="repositoryBean" />

			</bean>

		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />
			<!-- bean class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter"/ -->
		</jaxrs:providers>

		<jaxrs:inInterceptors>
			<!-- <ref bean="basicAuthValidator"/> -->
		</jaxrs:inInterceptors>
		<jaxrs:features>
			<ref bean="swagger2Feature" />
		</jaxrs:features>

	</jaxrs:server>

	<bean id="headersOutInterceptor" class="healthcheck.util.HeadersOutInterceptor" />

	<!-- We are adding the interceptors to the bus as we will have only one 
		endpoint/service/bus. -->

	<cxf:bus>
		<cxf:outInterceptors>
			<ref bean="headersOutInterceptor" />
		</cxf:outInterceptors>

	</cxf:bus>


	<!-- Apapche Shiro -->

	<bean class="healthcheck.util.AjaxUserFilter" id="ajaxUserFilter">
	</bean>

	<bean id="securityManagerBean" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="myRealm" />
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
		<property name="sessionManager">
			<bean class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
				<!-- <property name="sessionIdCookie" ref="cookiePORTALref"></property> -->
			</bean>

		</property>
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Define the Shiro Realm implementation you want to use to connect to 
		your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="healthcheck.util.ShiroUTAuthorizingRealm">
		<property name="hcRepository" ref="repositoryBean" />
	</bean>

	<!-- <bean id ="cookiePORTALref" class="org.apache.shiro.web.servlet.SimpleCookie"> 
		<property name="name" value="PORTALCOOKIEMAN"></property> <property name="path" 
		value="/"></property> </bean> -->

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManagerBean" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="successUrl" value="/index.html" />
		<property name="unauthorizedUrl" value="" />
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean defined will be automatically acquired and available via its beanName 
			in chain definitions, but you can perform overrides or parent/child consolidated 
			configuration here if you like: -->
		<property name="filters">
			<map>
				<entry key="userfilter" value-ref="ajaxUserFilter" />
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				# everything else requires authentication:
				/index.html = anon
				/services/api/components/** = anon, rest
				/services/api/admin/components/** = anon, rest
				/services/api/** = anon, rest
				/admin/** = anon
				/** = anon

			</value>
		</property>
	</bean>


  <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
    <package>healthcheck.routes</package>    
  </camelContext>
  
  <bean id="busController" class="healthcheck.util.BusController">
	<property name="actx" ref="camelContext" />
	</bean>
	
  <!-- lets configure the default ActiveMQ broker URL -->
  <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
    <property name="connectionFactory">
      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="vm://localhost?broker.persistent=false&amp;broker.useJmx=true"/>
      </bean>
    </property>
  </bean>

</beans>
